on:
  workflow_dispatch: ~
  push:
    branches: ['main', '*.*.x']
  pull_request: ~

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        php: ["8.3", "8.4"]
        dependencies: ["locked", "lowest", "highest"]
    steps:
      - uses: actions/checkout@v4
      - name: Create Docker network for NATS
        run: docker network create nats-net
      - name: Start nats-1
        run: |
          docker run -d \
            --name nats-1 \
            --network nats-net \
            -p 4222:4222 \
            -p 8222:8222 \
            -v ${{ github.workspace }}/docker/nats/server.conf:/etc/server.conf \
            nats \
            -c /etc/server.conf --name nats-1 -p 4222 -m 8222
      - name: Start nats-2
        run: |
          docker run -d \
            --name nats-2 \
            --network nats-net \
            -p 4223:4222 \
            -v ${{ github.workspace }}/docker/nats/server.conf:/etc/server.conf \
            nats \
            -c /etc/server.conf --name nats-2 -p 4222 -m 8222
      - name: Start nats-3
        run: |
          docker run -d \
            --name nats-3 \
            --network nats-net \
            -p 4224:4222 \
            -v ${{ github.workspace }}/docker/nats/server.conf:/etc/server.conf \
            nats \
            -c /etc/server.conf --name nats-2 -p 4222 -m 8222
      - name: Wait for JetStream to be ready
        run: |
          for i in {1..15}; do
            if curl -s http://localhost:8222/jsz | grep '"jetstream":true' > /dev/null; then
              echo "JetStream is ready"
              exit 0
            fi
            echo "Waiting for JetStream..."
            sleep 1
          done
          echo "JetStream did not initialize in time" >&2
          docker logs nats-1 || true
          exit 1
      - uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          ini-file: development
          tools: composer:v2
          extensions: pcntl
          ini-values: disable_functions=pcntl_fork
      - uses: ramsey/composer-install@v3
        with:
          composer-options: --optimize-autoloader
          dependency-versions: ${{ matrix.dependencies }}
        env:
          COMPOSER_AUTH: ${{ secrets.COMPOSER_AUTH || '{}' }}
      - run: composer test -- --colors=always
